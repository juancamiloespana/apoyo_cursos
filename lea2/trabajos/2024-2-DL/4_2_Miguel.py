# -*- coding: utf-8 -*-
"""Parcial_Final_Analitica_Redes_Parte2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LedkQB8mPMUxsC0qQTMUUcF9u31XviHa

#Trabajo DL Parte 2

##Equipo 4

Integrantes:

* Simon Marin
* Santiago Cordoba
* Miguel Vargas
"""

##basicas
import pandas as pd
import numpy as np

####### redes neuronales

import tensorflow as tf
from tensorflow import keras

##########
import joblib

from sklearn import metrics
import matplotlib.pyplot as plt
import seaborn as sns

"""#Punto 1"""

# Cargar modelo
modelo = keras.models.load_model('modelo.h5')
modelo.summary()

# Datos de prieba
X_te = joblib.load('X_te.joblib')
y_te=joblib.load('y_te.joblib')
X_tr=joblib.load('x_tr.joblib')
y_tr=joblib.load('y_tr.joblib')

# Evaluacion
pred_te = modelo.predict(X_tr)
y_actual = np.array(y_tr)
y_pred = np.array(pred_te)

# formas de las variable
print(f'y_actual shape: {y_actual.shape}')
print(f'y_pred shape: {y_pred.shape}')

# graficar predicciones vs valores reales
metrics.PredictionErrorDisplay.from_predictions(y_true=y_actual, y_pred=y_pred, kind="actual_vs_predicted")

"""Validando el resultado analitico y grafico de las predicciones en los datos de entrenamiento y test, se puede concluir que el modelo construido en el ejercicio anterior, presentó fallas en su estructura, ya que el valor devuelto en la predicción es practicamente constante, con lo cual no es posibles realizar un analisis diferentes a encontrar el error del modelo :(

#Punto 2
"""

# Cargar datos
url = 'https://raw.githubusercontent.com/juancamiloespana/LEA2/master/_data/credit_card_clients2.csv'
df_new = pd.read_csv(url)
df_new = df_new.dropna()
X = df_new.drop(['CUST_ID'], axis=1)

### Cargar escalador
sc = joblib.load('scaler.joblib')
x_scal = sc.transform(X)

### Evaluacion
pred_te = modelo.predict(x_scal)
y_actual = np.array(y_tr)
y_pred = np.array(pred_te)

#formas de las variables
print(f'y_actual shape: {y_actual.shape}')
print(f'y_pred shape: {y_pred.shape}')

# para graficar predicciones vs valores reales
metrics.PredictionErrorDisplay.from_predictions(y_true=y_actual, y_pred=y_pred, kind="actual_vs_predicted")

"""Dada la novedad anteriormente mencionada, no se puede predecir los valores para la nueva base de datos.


"""

# Predicciones futuras
df_new['predictions'] = pred_te

# Identificar los 10 clientes con mas compras
top_10_clients = df_new.nlargest(10, 'predictions')

# Calcular intervalo de confianza del 80%
mean_pred = top_10_clients['predictions'].mean()
std_pred = top_10_clients['predictions'].std()
confidence_interval = (mean_pred - 1.28 * std_pred, mean_pred + 1.28 * std_pred)

print(f'Intervalo de confianza del 80%: {confidence_interval}')
print(top_10_clients)

"""#Punto 3

Desconociendo un dato objetivo sobre la predicción, nos permitimos plantear algunas estrategias para difelizar los clientes una vez se corrija los datos de predicción sobre los datos del modelo, esto se realiza teniendo en cuenta el contexto de lo solicitado.

Estrategias para Fidelizar Clientes con Muchas Compras

    * Crear programas de lealtad que den puntos por cada compra, que luego puedan ser cambiados por descuentos o productos gratis.
    * Enviar ofertas especiales para productos o servicios relacionados con compras anteriores
    * Enviar mensajes de agradecimiento personalizados después de compras grandes
    * Invitar a clientes a eventos, lanzamientos de productos o ventas con promociones

Estrategias para Activar Clientes con Poco Uso de las Tarjetas
    * Ofrecer promociones especiales para los primeros usos de la tarjeta, como descuentos o recompensas
    * Dar incentivos como puntos extra
    * Ofrecer un período de prueba sin intereses o con cuotas reducidas para nuevas compras.
    * Proporcionar información sobre cómo maximizar los beneficios del uso de la tarjeta.
    * Enviar guías y consejos sobre la gestión financiera y el uso responsable del crédito.
    * Enviar recordatorios periódicos sobre las ventajas y ofertas actuales de la tarjeta
"""